{"version":3,"sources":["components/Toolbar.js","components/Playlists.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Toolbar","selectedPlaylist","onSortDown","onSortUp","classes","data","useUser","useState","anchorEl","setAnchorEl","open","Boolean","handleClose","AppBar","position","IconButton","aria-label","aria-controls","aria-haspopup","onClick","event","console","log","currentTarget","color","AccountCircle","Menu","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","window","external_urls","spotify","display_name","followers","total","product","Cookies","remove","ListItemText","primaryTypographyProps","Typography","variant","className","tracks","Tooltip","ArrowUpward","ArrowDownward","Playlists","token","setSelectedPlaylist","isSorting","setIsSorting","spotifyApi","Spotify","setAccessToken","splitToChunks","arr","size","reduce","acc","e","i","length","push","reorderPlaylist","a","direction","offset","allTracks","getPlaylistTracks","concat","items","sortedTracks","sort","b","track","name","sortedUris","map","uri","chunks","replaceTracksInPlaylist","shift","chunk","addTracksToPlaylist","handleSort","updatePlaylist","Grid","container","item","xs","LinearProgress","playlists","List","playlist","owner","collaborative","ListItem","button","selected","style","paddingLeft","align","process","REACT_APP_CLIENT_ID","REACT_APP_CALLBACK","App","setToken","useEffect","get","Provider","value","redirectUri","clientID","scopes","Scopes","all","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9ad38e1.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport { useUser } from 'react-spotify-api'\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  AppBar,\n  Toolbar as MuiToolbar,\n  Typography,\n  Tooltip,\n  IconButton,\n  Menu,\n  MenuItem,\n  ListItemText\n} from '@material-ui/core'\n\nimport {\n  ArrowUpward,\n  ArrowDownward,\n  AccountCircle\n} from '@material-ui/icons'\n\nimport Cookies from 'js-cookie'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst Toolbar = ({selectedPlaylist, onSortDown, onSortUp}) => {\n  const classes = useStyles();\n  const { data } = useUser()\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleMenu = (event) => {\n    console.log('data', data)\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleProfile = () => {\n    window.open(data.external_urls.spotify, \"_blank\")\n  }\n\n  const handleLogout = () => {\n    Cookies.remove('spotifyAuthToken')\n    window.open('/', '_self')\n  }\n\n  return (\n    <AppBar position=\"static\">\n      <MuiToolbar>\n        <div>\n          <IconButton\n            aria-label=\"account of current user\"\n            aria-controls=\"menu-appbar\"\n            aria-haspopup=\"true\"\n            onClick={handleMenu}\n            color=\"inherit\"\n            >\n            <AccountCircle />\n          </IconButton>\n          <Menu\n            id=\"menu-appbar\"\n            anchorEl={anchorEl}\n            anchorOrigin={{\n              vertical: 'top',\n              horizontal: 'right',\n            }}\n            keepMounted\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'right',\n            }}\n            open={open}\n            onClose={handleClose}\n            >\n            {data && <>\n              <MenuItem onClick={handleProfile}>{data.display_name}</MenuItem>\n              <MenuItem onClick={handleClose}>Followers: {data.followers.total}</MenuItem>\n              <MenuItem onClick={handleClose}>Subscription: {data.product}</MenuItem>\n            </>}\n            <MenuItem onClick={handleLogout}><ListItemText primaryTypographyProps={{color: 'error'}}>Logout</ListItemText></MenuItem>\n          </Menu>\n        </div>\n        <Typography variant=\"h6\" className={classes.title}>\n            Sort a playlist by title length\n        </Typography>\n        {selectedPlaylist && selectedPlaylist.tracks && <Typography variant=\"h6\" className={classes.title}>\n            ({selectedPlaylist.tracks.total} Songs)\n        </Typography>}\n        <Tooltip title='Ascending'>\n          <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={onSortUp}>\n            <ArrowUpward />\n          </IconButton>\n        </Tooltip>\n        <Tooltip title='Descending'>\n          <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={onSortDown}>\n            <ArrowDownward />\n          </IconButton>\n        </Tooltip>\n      </MuiToolbar>\n    </AppBar>\n  )\n}\n\nexport default Toolbar\n","import React, {useState} from 'react'\nimport { UserPlaylists, Playlist, useUser } from 'react-spotify-api'\nimport {\n  Grid,\n  List,\n  ListItem,\n  LinearProgress,\n  Typography\n} from '@material-ui/core'\nimport Toolbar from './Toolbar'\nimport Spotify from 'spotify-web-api-js'\nconst Playlists = ({token}) => {\n  const { data } = useUser()\n  const [selectedPlaylist, setSelectedPlaylist] = useState('')\n  const [isSorting, setIsSorting] = useState(false)\n\n  const spotifyApi = new Spotify()\n  spotifyApi.setAccessToken(token)\n\n  const splitToChunks = (arr, size) => arr.reduce((acc, e, i) => {\n    i % size ? acc[acc.length - 1].push(e) : acc.push([e])\n    return acc\n  }, []);\n\n  const reorderPlaylist = async (direction = 'asc') => {\n    if (selectedPlaylist && selectedPlaylist.id) {\n      let offset = 0\n      let allTracks = []\n\n      while (allTracks.length < selectedPlaylist.tracks.total) {\n        const tracks = await spotifyApi.getPlaylistTracks(selectedPlaylist.id, {offset})\n        allTracks = allTracks.concat(tracks.items)\n        offset += 100\n      }\n\n      const sortedTracks = allTracks.sort((a, b) => {\n        if (direction === 'asc') {\n          return a.track.name.length - b.track.name.length\n        }\n        return b.track.name.length - a.track.name.length\n      })\n\n      const sortedUris = sortedTracks.map(({track: {uri}}) => uri)\n      const chunks = splitToChunks(sortedUris, 100)\n      //replace playlist with first chunk of tracks\n      await spotifyApi.replaceTracksInPlaylist(selectedPlaylist.id, chunks.shift())\n\n      for (var chunk of chunks) {\n        await spotifyApi.addTracksToPlaylist(selectedPlaylist.id, chunk)\n      }\n    }\n  }\n\n  const handleSort = async (direction = 'asc') => {\n    setIsSorting(true)\n    await reorderPlaylist(direction)\n    setIsSorting(false)\n    const updatePlaylist = {...selectedPlaylist}\n    setSelectedPlaylist(null)\n    setSelectedPlaylist(updatePlaylist)\n  }\n\n  return (\n    <Grid container >\n      <Toolbar selectedPlaylist={selectedPlaylist} onSortDown={() => handleSort('desc')} onSortUp={() => handleSort('asc')}/>\n      <Grid item xs={12}>\n        {isSorting && <LinearProgress />}\n      </Grid>\n      <Grid item xs={3}>\n        <UserPlaylists>\n          {(playlists) =>{\n            if (!selectedPlaylist && playlists && playlists.data && playlists.data.items) {\n              setSelectedPlaylist(playlists.data.items[0])\n            }\n            return playlists && playlists.data ? (\n              <List >\n                {playlists.data.items.map(playlist => {\n                  if ((data && data.id && playlist.owner && data.id === playlist.owner.id) || playlist.collaborative) {\n                    return <ListItem button selected={playlist && selectedPlaylist && playlist.id === selectedPlaylist.id} onClick={() => setSelectedPlaylist(playlist)} key={playlist.id}>{playlist.name}</ListItem>\n                  }\n                  return null\n                })}\n              </List>\n            ) : null}\n          }\n        </UserPlaylists>\n      </Grid>\n      <Grid item xs={9}>\n        {selectedPlaylist ? <Playlist id={selectedPlaylist.id}>\n          {(playlist,) => {\n            if (playlist.data && playlist.data.tracks.items) {\n              return playlist.data.tracks.items.map(track => (\n                <h3 style={{ paddingLeft: '20px'}}key={track.track.id}>{track.track.name}</h3>\n              ))\n            }\n            return playlist && playlist.name ? <h1>{playlist.name}</h1> : null\n          }}\n        </Playlist> : <Typography align='center' variant='h5' >{'<- Select a Playlist'}</Typography>}\n      </Grid>\n    </Grid>\n  )\n}\n\nexport {Playlists}\n","import React, { useState, useEffect } from 'react'\nimport { SpotifyApiContext } from 'react-spotify-api'\nimport Cookies from 'js-cookie'\n\nimport { SpotifyAuth, Scopes } from 'react-spotify-auth'\nimport 'react-spotify-auth/dist/index.css'\n\nimport {Playlists} from './components/Playlists'\n\nconst {REACT_APP_CLIENT_ID = '', REACT_APP_CALLBACK = ''} = process.env\n\nconst App = () => {\n  const [token, setToken] = useState(\"\")\n  useEffect(() => {\n    setToken(Cookies.get('spotifyAuthToken'))\n  }, [])\n  return (\n    <div className='app'>\n      {token ? (\n        <SpotifyApiContext.Provider value={token}>\n          <Playlists token={token} />\n        </SpotifyApiContext.Provider>\n      ) : (\n        // Display the login page\n        <SpotifyAuth\n          redirectUri={REACT_APP_CALLBACK}\n          clientID={REACT_APP_CLIENT_ID}\n          scopes={[Scopes.all]}\n        />\n      )}\n    </div>\n  )\n}\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}